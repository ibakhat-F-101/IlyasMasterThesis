---
- name: Collect software inventory for CyFun ID.AM-2
  hosts: user_domain
  connection: local
  gather_facts: yes
  remote_user: "{{ user_var }}"
 


  vars_files:
    - ../../../../user/local_or_remote.yml

  tasks:
    - name: Get running Docker containers (services)
      shell: docker ps --format '{% raw %}{{.Names}}|{{.Image}}{% endraw %}'
      register: docker_services
      changed_when: false
      become: true

    - name: Initialize raw docker entries list
      set_fact:
        docker_entries_raw: []

    - name: Normalize Docker container names
      set_fact:
        docker_entries_raw: "{{ docker_entries_raw + [ {
          'clean_name': (
            item.split('|')[0]
            | regex_replace('^(docker-)?(jitsi-meet|docker-jitsi-meet|.*jitsi).*$', 'jitsi')
            | regex_replace('^(.*?)(-app|-db|-web|-api|-sso|-mssql|-mysql|-nginx|-redis|-identity|-icons|-notifications|-attachments|-admin|-events|-prosody|-jvb|-jicofo|-database)?(-[0-9]+)?$', '\\1')
            | lower
          ),
          'version': item.split('|')[1]
        } ] }}"
      loop: "{{ docker_services.stdout_lines }}"

    - name: Extract list of unique clean names
      set_fact:
        unique_service_names: "{{ docker_entries_raw | map(attribute='clean_name') | list | unique }}"

    - name: Initialize grouped docker entries
      set_fact:
        docker_entries: []

    - name: Group versions per service name
      set_fact:
        docker_entries: "{{ docker_entries + [ {
          'name': item,
          'versions': (docker_entries_raw | selectattr('clean_name', 'equalto', item) | map(attribute='version') | list | unique)
        } ] }}"
      loop: "{{ unique_service_names }}"



    - name: Get installed software (Debian/Ubuntu)
      command: dpkg-query -W -f='${Package} ${Version}\n'
      register: raw_software
      changed_when: false

    - name: Initialize software entries list
      set_fact:
        software_entries: []

    - name: Build software entries from package list
      set_fact:
        software_entries: >-
          {{
            software_entries +
            [
              {
                'name': item.split()[0],
                'version': (item.split()[1] if (item.split() | length > 1) else 'unknown')
              }
            ]
          }}
      loop: "{{ raw_software.stdout_lines }}"
      no_log: true # hide output

    - name: Define new inventory entry with separation
      set_fact:
        new_entry:
          inventory_type: software
          host: "{{ ansible_hostname }}"
          collected_on: "{{ ansible_date_time.date }}"
          os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
          software:
            docker_services: "{{ docker_entries }}"
            packages: "{{ software_entries }}"
            

    - name: Load existing software inventory (if any)
      slurp:
        src: /janus/domain/cyfun/identify/software/output/assets_software.yml
      register: existing_software_inventory
      ignore_errors: true

    - name: Parse existing inventory YAML if present
      set_fact:
        software_inventory: "{{ existing_software_inventory.content | b64decode | from_yaml }}"
      when:
        - existing_software_inventory is defined
        - existing_software_inventory.content is defined

    - name: Normalize software_inventory into a list
      set_fact:
        software_inventory: >-
          {{ 
            software_inventory 
            if software_inventory is defined and software_inventory | type_debug == 'list' 
            else [ software_inventory ] 
          }}
      when: software_inventory is defined

    - name: Initialize software_inventory if undefined
      set_fact:
        software_inventory: []
      when: software_inventory is not defined

    - name: Replace software inventory with current scan only
      set_fact:
        updated_software_inventory: [ "{{ new_entry }}" ]


    - name: Save updated software inventory to file
      copy:
        dest: /janus/domain/cyfun/identify/software/output/assets_software.yml
        content: "{{ updated_software_inventory | to_nice_yaml(indent=2) }}"
        mode: '0644'

    - name: Confirm completion
      debug:
        msg: "âœ… collect-software.yml executed successfully for CyFun ID.AM-2"
