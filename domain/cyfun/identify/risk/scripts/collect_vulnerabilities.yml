###############################################################################
# collect_vulnerabilities.yml – CyFun  ID.RA-1
###############################################################################
- name: Collect vulnerabilities for CyFun ID.RA-1
  hosts: user_domain                  # ⇢ ton inventaire
  connection: local
  gather_facts: no
  remote_user: "{{ user_var }}"

  vars_files:
    - ../../../../user/local_or_remote.yml

  vars:
    trivy_image:       aquasec/trivy:0.49.1
    output_dir:        trivy-reports
    output_dir_full:  "/janus/domain/cyfun/identify/risk/{{ output_dir }}"
    severities:        HIGH,CRITICAL
    vuln_file:         output/vulnerabilities.yml
    vuln_file_full:   "/janus/domain/cyfun/identify/risk/{{ vuln_file }}"
    dl_timeout:        300          # s
    trivy_mem:         512m         # limite mémoire par scan

###############################################################################
# TASKS
###############################################################################
  tasks:

  # ───────────────────────── 0. Purge ──────────────────────────────────────
  - name: Remove previous vulnerability file
    ansible.builtin.file:
      path: "{{ vuln_file_full }}"
      state: absent

  - name: Delete old Trivy reports directory
    ansible.builtin.file:
      path: "{{ output_dir_full }}"
      state: absent

  - name: Re-create empty report directory
    ansible.builtin.file:
      path: "{{ output_dir_full }}"
      state: directory
      mode: "0755"

  # ─────────────────── 1. Inventaire & pull des images ─────────────────────
  - name: Gather tagged docker images
    community.docker.docker_host_info:
      images: yes
    become: true
    register: docker_host
    no_log: true                   # masque le gros JSON

  - name: Extract unique tagged images
    ansible.builtin.set_fact:
      images_to_scan: >-
        {{
          docker_host.images | default([])
          | map(attribute='RepoTags') | flatten
          | reject('equalto', None) | unique
        }}

  - name: Pull images locally
    community.docker.docker_image:
      name: "{{ item }}"
      source: pull
      timeout: "{{ dl_timeout }}"
    loop: "{{ images_to_scan }}"
    loop_control: { label: "{{ item }}" }
    become: true
    throttle: 1

  # ────────────────────── 2. Scan Trivy (conteneur) ────────────────────────
  - name: Ensure shared Trivy cache directory exists
    ansible.builtin.file:
      path: "{{ playbook_dir }}/trivy-cache"
      state: directory
      mode: "0755"

  - name: Prime Trivy vulnerability database (one shot)
    become: true
    community.docker.docker_container:
      name: trivy_update
      image: "{{ trivy_image }}"
      command: [ image, --download-db-only, --cache-dir=/cache, alpine:3.19 ]
      volumes:
        - "{{ playbook_dir }}/trivy-cache:/cache"
      state: started
      detach: false
      auto_remove: true
      timeout: 600
    when: lookup('ansible.builtin.fileglob',
                 playbook_dir + '/trivy-cache/db/*',
                 errors='ignore') | length == 0

  - name: Scan each image with Trivy
    community.docker.docker_container:
      name: "trivy_scan_{{ item | regex_replace('[^a-zA-Z0-9]', '_') }}"
      image: "{{ trivy_image }}"
      command:
        - image
        - --severity={{ severities }}
        - --skip-update
        - --cache-dir=/cache
        - --timeout={{ dl_timeout }}s
        - --format=json
        - --scanners
        - vuln
        - --output=/reports/{{ item | basename | regex_replace('[/:]', '_') }}.json
        - "{{ item }}"
      volumes:
        - "{{ output_dir_full }}:/reports"
        - "{{ playbook_dir }}/trivy-cache:/cache"
      state: started
      detach: false
      memory: "{{ trivy_mem }}"
      auto_remove: true
      timeout: "{{ dl_timeout | int + 30 }}"
    loop: "{{ images_to_scan }}"
    loop_control: { label: "{{ item }}" }
    become: true
    throttle: 1
    ignore_errors: true
    failed_when: false

  # ─────────────────────── 3. Collecte des rapports ───────────────────────
  - name: Find Trivy JSON outputs
    ansible.builtin.find:
      paths: "{{ output_dir_full }}"
      patterns: "*.json"
    register: trivy_reports

  - meta: end_play
    when: trivy_reports.matched | int == 0

  # ─────────── 3-4. Consolidation & YAML (fait côté contrôleur) ───────────
  - name: Consolidate Trivy reports and write YAML (memory-safe)
    delegate_to: localhost
    run_once: true
    shell: |
      python3 - <<'PY'
      import json, yaml, glob, os, datetime
      out_dir  = os.environ['OUT_DIR']
      out_file = os.environ['OUT_FILE']

      vulns = {}
      for jf in glob.glob(os.path.join(out_dir, '*.json')):
          with open(jf) as f:
              data = json.load(f)
          img = data.get('ArtifactName')
          for res in data.get('Results', []):
              for v in (res.get('Vulnerabilities') or []):
                  vid = v['VulnerabilityID']
                  entry = vulns.setdefault(vid, {
                      'severity': v.get('Severity', 'UNKNOWN'),
                      'title':    v.get('Title', ''),
                      'cwe':      v.get('CweIDs', []),
                      'images':   []
                  })
                  if img not in entry['images']:
                      entry['images'].append(img)

      final = {
          'collected_on': datetime.date.today().isoformat(),
          'scanner':      'trivy_container',
          'unique_cve_count': len(vulns),
          'vulnerabilities': [
              {'VulnerabilityID': k, **v} for k, v in vulns.items()
          ]
      }
      yaml.safe_dump(final, open(out_file, 'w'), sort_keys=False)
      PY
    environment:
      OUT_DIR:  "{{ output_dir_full }}"
      OUT_FILE: "{{ vuln_file_full }}"
    no_log: true          # ne rien afficher
    changed_when: true

  # ─────────────────────────── 5. Message final ───────────────────────────
  - name: Completion message (summary only)
    ansible.builtin.debug:
      msg: >-
        ✅ Scan terminé : {{ trivy_reports.matched }} images,
        {{ lookup('ansible.builtin.file', vuln_file_full)
           | from_yaml
           | json_query('unique_cve_count') }} CVE uniques.
