---
- name: Prioritize inventory for CyFun ID.AM-5 compliance
  hosts: user_domain
  connection: local
  gather_facts: yes
  remote_user: "{{ user_var }}"

  vars_files:
    - ../../../../user/local_or_remote.yml

  tasks:
    # Load collected inventory
    - name: Slurp collected inventory
      slurp:
        src: ../manuals/inventory.yml
      register: raw_inventory

    - name: Parse inventory YAML
      set_fact:
        inventory: "{{ raw_inventory.content | b64decode | from_yaml }}"

    # Load prioritization matrix
    - name: Slurp prioritization matrix
      slurp:
        src: ../manuals/prioritization_matrix.yml
      register: raw_matrix

    - name: Parse matrix YAML
      set_fact:
        matrix: "{{ raw_matrix.content | b64decode | from_yaml }}"

    # Initialize prioritized lists
    - name: Initialize priority lists
      set_fact:
        prioritized_software_auto: []
        prioritized_software_manual: []
        prioritized_info: []
        prioritized_manual_assets: []

    # Prioritize auto-detected software
    - name: Prioritize auto software services
      set_fact:
        prioritized_software_auto: >-
          {{ prioritized_software_auto + [ {
              'name': svc,
              'classification': (matrix.rules.software_auto
                | selectattr('match','equalto', svc)
                | map(attribute='classification')
                | list | first
                | default(matrix.default.classification)),
              'criticality': (matrix.rules.software_auto
                | selectattr('match','equalto', svc)
                | map(attribute='criticality')
                | list | first
                | default(matrix.default.criticality)),
              'value': (matrix.rules.software_auto
                | selectattr('match','equalto', svc)
                | map(attribute='value')
                | list | first
                | default(matrix.default.value))
            } ] }}
      loop: "{{ inventory.software_auto[0].software.docker_services
        | map('regex_replace','-.*$','')
        | unique }}"
      loop_control:
        loop_var: svc

    # Prioritize manually defined software
    - name: Prioritize manual software entries
      set_fact:
        prioritized_software_manual: >-
          {{ prioritized_software_manual + [ {
              'name': item.name,
              'classification': (matrix.rules.software_manual
                | selectattr('match','equalto', item.name)
                | map(attribute='classification')
                | list | first
                | default(matrix.default.classification)),
              'criticality': (matrix.rules.software_manual
                | selectattr('match','equalto', item.name)
                | map(attribute='criticality')
                | list | first
                | default(matrix.default.criticality)),
              'value': (matrix.rules.software_manual
                | selectattr('match','equalto', item.name)
                | map(attribute='value')
                | list | first
                | default(matrix.default.value))
            } ] }}
      loop: "{{ inventory.software_manual }}"

    # Prioritize information types
    - name: Prioritize information types
      set_fact:
        prioritized_info: >-
          {{ prioritized_info + [ {
              'name': item.name,
              'classification': (matrix.rules.information_types
                | selectattr('match','equalto', item.name)
                | map(attribute='classification')
                | list | first
                | default(matrix.default.classification)),
              'criticality': (matrix.rules.information_types
                | selectattr('match','equalto', item.name)
                | map(attribute='criticality')
                | list | first
                | default(matrix.default.criticality)),
              'value': (matrix.rules.information_types
                | selectattr('match','equalto', item.name)
                | map(attribute='value')
                | list | first
                | default(matrix.default.value))
            } ] }}
      loop: "{{ inventory.information_types }}"

    # Prioritize manually defined assets
    - name: Prioritize manual assets
      set_fact:
        prioritized_manual_assets: >-
          {{ prioritized_manual_assets + [ {
              'id': item.id,
              'name': item.name,
              'type': item.type,
              'classification': (matrix.rules.assets_manual
                | selectattr('match','equalto', item.type)
                | map(attribute='classification')
                | list | first
                | default(matrix.default.classification)),
              'criticality': (matrix.rules.assets_manual
                | selectattr('match','equalto', item.type)
                | map(attribute='criticality')
                | list | first
                | default(matrix.default.criticality)),
              'value': (matrix.rules.assets_manual
                | selectattr('match','equalto', item.type)
                | map(attribute='value')
                | list | first
                | default(matrix.default.value))
            } ] }}
      loop: "{{ inventory.assets_manual }}"

    # Combine all prioritized assets
    - name: Combine all prioritized assets
      set_fact:
        prioritized_inventory: >-
          {{ prioritized_software_auto
             + prioritized_software_manual
             + prioritized_info
             + prioritized_manual_assets }}

    # Assign criticality weights
    - name: Define criticality weight mapping
      set_fact:
        weight_map:
          critical: 4
          high:     3
          medium:   2
          low:      1

    # Annotate each item with weight
    - name: Annotate each resource with crit_weight
      set_fact:
        weighted_assets: >-
          {{ (weighted_assets | default([]))
             + [ item | combine({'crit_weight': weight_map[item.criticality]}) ] }}
      loop: "{{ prioritized_inventory }}"
      loop_control:
        loop_var: item

    # Sort by weight descending
    - name: Sort assets by descending crit_weight
      set_fact:
        prioritized_inventory: >-
          {{ weighted_assets
             | sort(attribute='crit_weight', reverse=true) }}

    # Remove internal crit_weight
    - name: Strip internal crit_weight attribute
      set_fact:
        prioritized_inventory: >-
          {{ prioritized_inventory
             | map('dict2items')
             | map('rejectattr', 'key', 'equalto', 'crit_weight')
             | map('items2dict')
             | list }}

    # Save prioritized inventory to file
    - name: Save prioritized inventory to file
      copy:
        dest: "/janus/domain/cyfun/identify/inventory/output/prioritized_inventory.yml"
        content: "{{ prioritized_inventory | to_nice_yaml(indent=2) }}"
        mode: '0644'

    - name: Confirm completion
      debug:
        msg: "âœ… prioritize_inventory.yml executed successfully; prioritized_inventory.yml generated."
