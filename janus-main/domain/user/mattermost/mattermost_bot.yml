---
- name: Configure Mattermost
  hosts: user_domain
  gather_facts: true
  remote_user: "{{ user_var }}"
  connection: local
  vars_files:
    - ../local_or_remote.yml
  vars:
    IP: 127.0.0.1
    PORT: 8081
    CALLS_PORT: 8441
    MATTERMOST_PORT: 8081
    MATTERMOST_URL: "http://{{ IP }}:{{ MATTERMOST_PORT }}/api/v4"
    MATTERMOST_WEBSOCKET_URL: "http://{{ IP }}:{{ MATTERMOST_PORT }}/api/v4/websocket"
    SYSTEM_ADMIN_EMAIL: "{{ lookup('env', 'SYSTEM_ADMIN_EMAIL') | default('admin@example.com', true) }}"
    SYSTEM_ADMIN_USERNAME: "{{ lookup('env', 'SYSTEM_ADMIN_USERNAME') | default('admin', true) }}"
    SYSTEM_ADMIN_PASSWORD: "{{ lookup('env', 'SYSTEM_ADMIN_PASSWORD') | default('AdminPassword123', true) }}"
    VENV_PATH: /opt/venv
    PYTHON_VENV_BIN: /opt/venv/bin

  tasks:
    - name: Ensure community.docker collection is installed
      command: ansible-galaxy collection install community.docker --force --timeout 120
      delegate_to: localhost
      run_once: true
      ignore_errors: true
      no_log: false
      retries: 5  # Retry 5 times
      delay: 10   # Wait 10 seconds between retries

    - name: Include Mattermost setup tasks
      include_tasks: /janus/services/templates/mattermost/mattermost.yml

    - name: Update apt cache
      apt:
        update_cache: yes
      become: true

    - name: Install Python and required packages
      package:
        name:
          - python3
          - python3-pip
          - python3-venv
          - python3-requests
        state: present
      become: true

    - name: Create Python virtual environment
      command: python3 -m venv {{ VENV_PATH }}
      args:
        creates: "{{ VENV_PATH }}/bin/activate"
      become: true

    - name: Install websocket-client in virtualenv
      pip:
        name: websocket-client
        executable: "{{ PYTHON_VENV_BIN }}/pip"
      become: true

    - name: Install crewai and langchain-openai in virtualenv
      pip:
        name:
          - crewai
          - langchain-openai
        executable: "{{ PYTHON_VENV_BIN }}/pip"
      become: true

    - name: Copy mattermost_bot directory to VM
      copy:
        src: ./mattermost_bot/
        dest: /home/{{ user_var }}/mattermost_bot/
        mode: '0755'
      become: true
      become_user: "{{ user_var }}"

    - name: Copy images directory to VM
      copy:
        src: ./images/
        dest: /home/{{ user_var }}/images/
        mode: '0755'
      become: true
      become_user: "{{ user_var }}"

    - name: Wait for Mattermost API to be available
      uri:
        url: "{{ MATTERMOST_URL }}/users"
        method: GET
        status_code: 401
        timeout: 10
      register: api_result
      until: api_result.status == 401
      retries: 120
      delay: 5
      become: true

    - name: Create systemd service file for Mattermost bot
      copy:
        content: |
          [Unit]
          Description=Mattermost Bot Service
          After=network.target

          [Service]
          User={{ user_var }}
          WorkingDirectory=/home/{{ user_var }}/mattermost_bot
          Environment="PYTHONPATH=/usr/lib/python3/dist-packages"
          Environment="MATTERMOST_URL={{ MATTERMOST_URL }}"
          Environment="HOME=/home/{{ user_var }}"
          Environment="SYSTEM_ADMIN_EMAIL={{ SYSTEM_ADMIN_EMAIL }}"
          Environment="SYSTEM_ADMIN_USERNAME={{ SYSTEM_ADMIN_USERNAME }}"
          Environment="SYSTEM_ADMIN_PASSWORD={{ SYSTEM_ADMIN_PASSWORD }}"
          Environment="DEEPSEEK_API_KEY={{ lookup('env', 'DEEPSEEK_API_KEY') | default('sk-c6834c0711a94d6ea027ee1f955809e1', true) }}"
          ExecStart={{ PYTHON_VENV_BIN }}/python /home/{{ user_var }}/mattermost_bot/main.py
          Restart=always
          StandardOutput=append:/home/{{ user_var }}/mattermost_bot.log
          StandardError=append:/home/{{ user_var }}/mattermost_bot.log

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/mattermost_bot.service
        mode: '0644'
      become: true

    - name: Reload systemd daemon
      command: systemctl daemon-reload
      become: true

    - name: Enable and start Mattermost bot service
      systemd:
        name: mattermost_bot.service
        enabled: yes
        state: started
      become: true